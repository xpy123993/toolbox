// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EndpointClient is the client API for Endpoint service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EndpointClient interface {
	// A service to proxy TCP/UDP requests.
	Proxy(ctx context.Context, opts ...grpc.CallOption) (Endpoint_ProxyClient, error)
}

type endpointClient struct {
	cc grpc.ClientConnInterface
}

func NewEndpointClient(cc grpc.ClientConnInterface) EndpointClient {
	return &endpointClient{cc}
}

func (c *endpointClient) Proxy(ctx context.Context, opts ...grpc.CallOption) (Endpoint_ProxyClient, error) {
	stream, err := c.cc.NewStream(ctx, &Endpoint_ServiceDesc.Streams[0], "/proto.Endpoint/Proxy", opts...)
	if err != nil {
		return nil, err
	}
	x := &endpointProxyClient{stream}
	return x, nil
}

type Endpoint_ProxyClient interface {
	Send(*DataTrunk) error
	Recv() (*DataTrunk, error)
	grpc.ClientStream
}

type endpointProxyClient struct {
	grpc.ClientStream
}

func (x *endpointProxyClient) Send(m *DataTrunk) error {
	return x.ClientStream.SendMsg(m)
}

func (x *endpointProxyClient) Recv() (*DataTrunk, error) {
	m := new(DataTrunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EndpointServer is the server API for Endpoint service.
// All implementations must embed UnimplementedEndpointServer
// for forward compatibility
type EndpointServer interface {
	// A service to proxy TCP/UDP requests.
	Proxy(Endpoint_ProxyServer) error
	mustEmbedUnimplementedEndpointServer()
}

// UnimplementedEndpointServer must be embedded to have forward compatible implementations.
type UnimplementedEndpointServer struct {
}

func (UnimplementedEndpointServer) Proxy(Endpoint_ProxyServer) error {
	return status.Errorf(codes.Unimplemented, "method Proxy not implemented")
}
func (UnimplementedEndpointServer) mustEmbedUnimplementedEndpointServer() {}

// UnsafeEndpointServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EndpointServer will
// result in compilation errors.
type UnsafeEndpointServer interface {
	mustEmbedUnimplementedEndpointServer()
}

func RegisterEndpointServer(s grpc.ServiceRegistrar, srv EndpointServer) {
	s.RegisterService(&Endpoint_ServiceDesc, srv)
}

func _Endpoint_Proxy_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(EndpointServer).Proxy(&endpointProxyServer{stream})
}

type Endpoint_ProxyServer interface {
	Send(*DataTrunk) error
	Recv() (*DataTrunk, error)
	grpc.ServerStream
}

type endpointProxyServer struct {
	grpc.ServerStream
}

func (x *endpointProxyServer) Send(m *DataTrunk) error {
	return x.ServerStream.SendMsg(m)
}

func (x *endpointProxyServer) Recv() (*DataTrunk, error) {
	m := new(DataTrunk)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Endpoint_ServiceDesc is the grpc.ServiceDesc for Endpoint service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Endpoint_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Endpoint",
	HandlerType: (*EndpointServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Proxy",
			Handler:       _Endpoint_Proxy_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "endpoint.proto",
}
