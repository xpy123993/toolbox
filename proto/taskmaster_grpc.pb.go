// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TaskMasterClient is the client API for TaskMaster service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TaskMasterClient interface {
	// Query marks a task as "owned" and returns the task content.
	// Returns error if no available tasks.
	Query(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*QueryResponse, error)
	// Finish marks a task as "done".
	// This will prevent the task master from scheduling again after expired.
	Finish(ctx context.Context, in *FinishRequest, opts ...grpc.CallOption) (*FinishResponse, error)
	// Extend extends an ongoing task's loan.
	Extend(ctx context.Context, in *TaskExtendRequest, opts ...grpc.CallOption) (*TaskExtendResponse, error)
	// Insert inserts a new task into the task master.
	Insert(ctx context.Context, in *InsertRequest, opts ...grpc.CallOption) (*InsertResponse, error)
}

type taskMasterClient struct {
	cc grpc.ClientConnInterface
}

func NewTaskMasterClient(cc grpc.ClientConnInterface) TaskMasterClient {
	return &taskMasterClient{cc}
}

func (c *taskMasterClient) Query(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*QueryResponse, error) {
	out := new(QueryResponse)
	err := c.cc.Invoke(ctx, "/proto.TaskMaster/Query", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskMasterClient) Finish(ctx context.Context, in *FinishRequest, opts ...grpc.CallOption) (*FinishResponse, error) {
	out := new(FinishResponse)
	err := c.cc.Invoke(ctx, "/proto.TaskMaster/Finish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskMasterClient) Extend(ctx context.Context, in *TaskExtendRequest, opts ...grpc.CallOption) (*TaskExtendResponse, error) {
	out := new(TaskExtendResponse)
	err := c.cc.Invoke(ctx, "/proto.TaskMaster/Extend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskMasterClient) Insert(ctx context.Context, in *InsertRequest, opts ...grpc.CallOption) (*InsertResponse, error) {
	out := new(InsertResponse)
	err := c.cc.Invoke(ctx, "/proto.TaskMaster/Insert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TaskMasterServer is the server API for TaskMaster service.
// All implementations must embed UnimplementedTaskMasterServer
// for forward compatibility
type TaskMasterServer interface {
	// Query marks a task as "owned" and returns the task content.
	// Returns error if no available tasks.
	Query(context.Context, *QueryRequest) (*QueryResponse, error)
	// Finish marks a task as "done".
	// This will prevent the task master from scheduling again after expired.
	Finish(context.Context, *FinishRequest) (*FinishResponse, error)
	// Extend extends an ongoing task's loan.
	Extend(context.Context, *TaskExtendRequest) (*TaskExtendResponse, error)
	// Insert inserts a new task into the task master.
	Insert(context.Context, *InsertRequest) (*InsertResponse, error)
	mustEmbedUnimplementedTaskMasterServer()
}

// UnimplementedTaskMasterServer must be embedded to have forward compatible implementations.
type UnimplementedTaskMasterServer struct {
}

func (UnimplementedTaskMasterServer) Query(context.Context, *QueryRequest) (*QueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Query not implemented")
}
func (UnimplementedTaskMasterServer) Finish(context.Context, *FinishRequest) (*FinishResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Finish not implemented")
}
func (UnimplementedTaskMasterServer) Extend(context.Context, *TaskExtendRequest) (*TaskExtendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Extend not implemented")
}
func (UnimplementedTaskMasterServer) Insert(context.Context, *InsertRequest) (*InsertResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Insert not implemented")
}
func (UnimplementedTaskMasterServer) mustEmbedUnimplementedTaskMasterServer() {}

// UnsafeTaskMasterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TaskMasterServer will
// result in compilation errors.
type UnsafeTaskMasterServer interface {
	mustEmbedUnimplementedTaskMasterServer()
}

func RegisterTaskMasterServer(s grpc.ServiceRegistrar, srv TaskMasterServer) {
	s.RegisterService(&TaskMaster_ServiceDesc, srv)
}

func _TaskMaster_Query_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskMasterServer).Query(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.TaskMaster/Query",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskMasterServer).Query(ctx, req.(*QueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskMaster_Finish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FinishRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskMasterServer).Finish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.TaskMaster/Finish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskMasterServer).Finish(ctx, req.(*FinishRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskMaster_Extend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskExtendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskMasterServer).Extend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.TaskMaster/Extend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskMasterServer).Extend(ctx, req.(*TaskExtendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskMaster_Insert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskMasterServer).Insert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.TaskMaster/Insert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskMasterServer).Insert(ctx, req.(*InsertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TaskMaster_ServiceDesc is the grpc.ServiceDesc for TaskMaster service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TaskMaster_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.TaskMaster",
	HandlerType: (*TaskMasterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Query",
			Handler:    _TaskMaster_Query_Handler,
		},
		{
			MethodName: "Finish",
			Handler:    _TaskMaster_Finish_Handler,
		},
		{
			MethodName: "Extend",
			Handler:    _TaskMaster_Extend_Handler,
		},
		{
			MethodName: "Insert",
			Handler:    _TaskMaster_Insert_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "taskmaster.proto",
}
